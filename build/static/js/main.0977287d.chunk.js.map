{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","onChange","e","target","undefined","placeholder","style","width","Table","columns","data","useTable","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","newsletters","require","Categories","values","genre","idx","key","App","ReactGA","initialize","pageview","useMemo","Header","accessor","Cell","src","alt","href","url","rel","name","sort","Math","random","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0977287d.chunk.js","sourcesContent":["import React from \"react\";\nimport { useTable, useGlobalFilter, useSortBy } from \"react-table\";\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  const count = preGlobalFilteredRows.length;\n\n  return (\n    <span>\n      <input\n        value={globalFilter || \"\"}\n        onChange={e => {\n          setGlobalFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search ${count} newsletters...`}\n        style={{\n          width: \"100%\"\n        }}\n      />\n    </span>\n  );\n}\n\nexport default function Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  // Render the UI for your table\n  return (\n    <>\n      <GlobalFilter\n        preGlobalFilteredRows={preGlobalFilteredRows}\n        globalFilter={state.globalFilter}\n        setGlobalFilter={setGlobalFilter}\n        onChange={setGlobalFilter}\n      />\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"sort-desc\"\n                        : \"sort-asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport ReactGA from \"react-ga\";\nimport Table from \"./Table\";\nimport \"./App.css\";\nlet newsletters = require(\"./newsletters.json\");\n\nconst Categories = ({ values }) => {\n  return (\n    <>\n      {values.map((genre, idx) => {\n        return (\n          <span key={idx} className=\"badge\">\n            {genre}\n          </span>\n        );\n      })}\n    </>\n  );\n};\n\nconst initializeAnalytics = function() {\n  const trackingId = \"UA-74402730-2\";\n  ReactGA.initialize(trackingId);\n  ReactGA.pageview(\"/Home\");\n};\n\nfunction App() {\n  initializeAnalytics();\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Newsletter\",\n        columns: [\n          {\n            Header: \" \",\n            accessor: \"image\",\n            Cell: ({ cell: { value } }) => (\n              <img className=\"icon\" src={value} alt=\"\" />\n            )\n          },\n          {\n            Header: \"Name\",\n            accessor: \"source\",\n            Cell: ({ cell: { value } }) => (\n              <a href={value.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {value.name}\n              </a>\n            )\n          },\n          {\n            Header: \"Author\",\n            accessor: \"author\"\n          }\n        ]\n      },\n      {\n        Header: \"Details\",\n        columns: [\n          {\n            Header: \"Description\",\n            accessor: \"description\"\n          },\n          {\n            Header: \"Category\",\n            accessor: \"categories\",\n            Cell: ({ cell: { value } }) => <Categories values={value} />\n          },\n          {\n            Header: \"Frequency\",\n            accessor: \"frequency\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  return (\n    <div className=\"App\">\n      <span>TODO</span>\n      <ol>\n        <li>add google analytics</li>\n        <li>add your own newletter to the top (mail chimp?)</li>\n        <li>post on product hunt</li>\n        <li>add an about page/contact form</li>\n        <li>\n          upon launching - thank people on Twitter (also helps spread the\n          word...)\n        </li>\n      </ol>\n      <h1>newsletters.best</h1>\n      <Table\n        columns={columns}\n        data={newsletters.sort(() => Math.random() - 0.5)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}